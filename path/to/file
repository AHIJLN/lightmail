async function generateContent(promptText) {
  console.log("调用AI生成内容，提示：", promptText);
  const payload = {
    model: "qwq-plus",
    messages: [{ role: 'user', content: promptText }],
    temperature: 0.7,
    max_tokens: 2000,
    stream: true
  };
  
  try {
    const response = await fetch("/api/generate-content", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      throw new Error("AI接口请求失败: " + response.status);
    }
    
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let completeContent = "";
    let buffer = ""; // 用于存储不完整的数据
    
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      
      // 解码当前块并添加到缓冲区
      const chunk = decoder.decode(value, { stream: true });
      buffer += chunk;
      
      // 处理SSE格式的数据
      const lines = buffer.split('\n');
      // 保留最后一个可能不完整的行
      buffer = lines.pop() || "";
      
      for (const line of lines) {
        if (line.trim().startsWith('data:')) {
          const jsonStr = line.substring(line.indexOf('data:') + 5).trim();
          
          if (jsonStr === '[DONE]') continue;
          
          try {
            if (jsonStr && jsonStr !== '') {
              // 添加日志以便调试
              console.log("Received data chunk:", jsonStr);
              
              // 检查是否是有效的JSON
              if (jsonStr.startsWith('{') && jsonStr.endsWith('}')) {
                const jsonData = JSON.parse(jsonStr);
                if (jsonData.choices && jsonData.choices[0].delta && jsonData.choices[0].delta.content) {
                  completeContent += jsonData.choices[0].delta.content;
                }
              } else {
                console.log("Skipping invalid JSON chunk:", jsonStr);
              }
            }
          } catch (e) {
            console.log("解析流数据出错:", e);
            console.log("问题数据:", jsonStr);
            // 不中断处理，继续尝试解析其他行
          }
        }
      }
    }

    // 处理缓冲区中剩余的数据
    if (buffer.trim()) {
      console.log("处理剩余缓冲区数据:", buffer);
      try {
        const jsonStr = buffer.substring(buffer.indexOf('data:') + 5).trim();
        if (jsonStr && jsonStr !== '[DONE]') {
          const jsonData = JSON.parse(jsonStr);
          if (jsonData.choices && jsonData.choices[0].delta && jsonData.choices[0].delta.content) {
            completeContent += jsonData.choices[0].delta.content;
          }
        }
      } catch (e) {
        console.log("处理剩余数据时出错:", e);
      }
    }

    return completeContent;
  } catch (error) {
    console.log("AI生成内容错误:", error);
    alert("AI生成内容失败：" + error.message);
    return "";
  }
} 